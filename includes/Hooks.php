<?php
/**
 * All the actions and filters are added here.
 *
 * @package mjj-plugin-starter
 */

namespace Tharsheblows\MjjPluginStarter;

/**
 * This class should contain all the hooks. The callbacks should go in the appropriate class if there is one but if there's not, it's fine to put them here too.
 */
class Hooks {

	/**
	 * The full path to the plugin.
	 *
	 * @var string
	 */
	public $plugin_path;

	/**
	 * The full url of the plugin.
	 *
	 * @var string
	 */
	public $plugin_url;

	/**
	 * Set the class variables.
	 */
	public function __construct() {
		$this->plugin_path = PLUGIN_PATH;
		$this->plugin_url  = PLUGIN_URL;
	}


	/**
	 * Add all the hooks.
	 *
	 * @return void
	 */
	public function add() {

		// For translations.
		add_action( 'plugins_loaded', [ $this, 'load_textdomain' ], 99 );
		add_action( 'enqueue_block_editor_assets', [ $this, 'block_localization' ] );

		// Enqueue all the assets everywhere.
		add_action( 'enqueue_block_assets', [ $this, 'block_assets' ] );

		// Enqueue block assets for the editor only.
		add_action( 'enqueue_block_editor_assets', [ $this, 'editor_assets' ] );

		// Enqueue the front end scripts.
		add_action( 'wp_enqueue_scripts', [ $this, 'front_end_scripts' ] );

		// Filter the content to hijack the render_block method so we can add appy things.
		add_filter( 'render_block', [ $this, 'hijack_render_blocks' ], 10, 2 );

	}

	/**
	 * Loads the plugin language files.
	 *
	 * @access public
	 * @since 1.0.0
	 * @return void
	 */
	public function load_textdomain() {
		load_plugin_textdomain( 'mjj-plugin-starter', false, $this->plugin_path . '/languages/' );
	}

	/**
	 * Enqueue localization data.
	 *
	 * @access public
	 */
	public function block_localization() {
		if ( function_exists( 'wp_set_script_translations' ) ) {
			wp_set_script_translations( 'mjj-plugin-starter' );
		}
	}



	/**
	 * Enqueue block assets for use within Gutenberg.
	 *
	 * @access public
	 */
	public function block_assets() {

		// Styles.
		wp_enqueue_style(
			'mjj-plugin-starter-frontend',
			$this->plugin_url . '/build/style-main.css',
			[],
			$this->asset_file( 'style-main', 'version' )
		);
	}

	/**
	 * Enqueue block assets for use within Gutenberg.
	 *
	 * @access public
	 */
	public function editor_assets() {

		if ( ! is_admin() ) {
			return;
		}

		// Styles.
		wp_enqueue_style(
			'mjj-plugin-starter-editor',
			$this->plugin_url . 'build/main.css',
			[],
			$this->asset_file( 'index', 'version' )
		);

		// Scripts.
		wp_enqueue_script(
			'mjj-plugin-starter-editor',
			$this->plugin_url . 'build/main.js',
			array_merge( $this->asset_file( 'main', 'dependencies' ), [ 'wp-api', 'wp-compose' ] ),
			$this->asset_file( 'main', 'version' ),
			false
		);

	}


	/**
	 * Get editor asset file.
	 *
	 * @param string $handle Asset handle to reference.
	 * @param string $key What do we want to return: version or dependencies.
	 */
	private function asset_file( $handle, $key ) {
		$default_asset_file = [
			'dependencies' => [],
			'version'      => '1.0',
		];

		$asset_filepath = $this->plugin_path . "build/{$handle}.asset.php";
		$asset_file     = file_exists( $asset_filepath ) ? include $asset_filepath : $default_asset_file;

		if ( 'version' === $key ) {
			return $asset_file['version'];
		}

		if ( 'dependencies' === $key ) {
			return $asset_file['dependencies'];
		}
	}



	/**
	 * The front end scripts.
	 *
	 * @return void
	 */
	public function front_end_scripts() {
		wp_enqueue_script(
			'mjj-plugin-starter-frontend',
			$this->plugin_url . 'dist/front.bundle.js',
			$this->front_end_asset_file( 'front.bundle', 'dependencies' ),
			$this->front_end_asset_file( 'front.bundle', 'version' ),
			true
		);
	}


	/**
	 * Get asset file.
	 *
	 * @param string $handle Asset handle to reference.
	 * @param string $key What do we want to return: version or dependencies.
	 */
	private function front_end_asset_file( $handle, $key ) {
		$default_asset_file = [
			'dependencies' => [],
			'version'      => '1.0',
		];

		$asset_filepath = $this->plugin_path . "dist/{$handle}.asset.php";
		$asset_file     = file_exists( $asset_filepath ) ? include $asset_filepath : $default_asset_file;

		if ( 'version' === $key ) {
			return $asset_file['version'];
		}

		if ( 'dependencies' === $key ) {
			return $asset_file['dependencies'];
		}
	}

	/**
	 * Hijack the rendering of these blocks, making a div which we will fill with our little app.
	 *
	 * @param null  $render A trigger to stop the block rendering process.
	 * @param array $block The array of the block data generated by the block editor.
	 * @return null|string If this is null, rendering continues in core, otherwise it uses the html string sent.
	 */
	function hijack_render_blocks( $render, $block ) {
		$block_name = $block['blockName'];

		// This could be teased out as something in the individual block.
		// Add blocks to this array to keep them unrendered by the content filters.
		$blocks_to_hijack = [
			'mjj-plugin-starter/clickgame',
		];

		if ( in_array( $block_name, $blocks_to_hijack, true ) ) {
			$attributes = wp_json_encode( $block['attrs'] );
			// I'm skipping innerContent, innerHTML and innerBlocks for now because I'm not using them.
			$classes = esc_html( str_replace( '/', ' ', $block['blockName'] ) ); // A bit delicate maybe.
			$render  = "<div class='$classes' data-attr='$attributes' data-block='$block_name'></div>";
		}
		return $render;
	}

}
